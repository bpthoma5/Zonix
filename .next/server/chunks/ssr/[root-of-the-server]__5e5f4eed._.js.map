{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///Users/brycethomas/Documents/zonix/app/map/page.jsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";\n\nmapboxgl.accessToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\n\nexport default function MapPage() {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n\n  const defaultCenter = [-111.94, 33.4255]; // Tempe\n  const defaultZoom = 11;\n\n  useEffect(() => {\n    if (map.current || !mapContainer.current) return; // make sure container exists\n\n    // Initialize map\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/streets-v12\",\n      center: defaultCenter,\n      zoom: defaultZoom,\n    });\n\n    map.current.on(\"load\", async () => {\n      // Navigation controls\n      map.current.addControl(new mapboxgl.NavigationControl(), \"top-right\");\n\n      // Geocoder\n      const geocoder = new MapboxGeocoder({\n        accessToken: mapboxgl.accessToken,\n        mapboxgl,\n        marker: false,\n      });\n      map.current.addControl(geocoder, \"top-left\");\n\n      // Random color generator\n      const randomColor = () => `hsl(${Math.random() * 360}, 60%, 60%)`;\n\n      // Function to add zoning layers\n      async function addZoningLayer(city, filename, codeField, descField = null) {\n        const response = await fetch(`/data/${filename}`);\n        const geojson = await response.json();\n\n        // Unique zoning codes\n        const zonings = [\n          ...new Set(\n            geojson.features\n              .map(f => f.properties[codeField])\n              .filter(Boolean)\n          ),\n        ];\n\n        // Assign colors\n        const colorMap = {};\n        zonings.forEach(z => (colorMap[z] = randomColor()));\n\n        // Add source\n        map.current.addSource(`${city}-zoning`, {\n          type: \"geojson\",\n          data: geojson,\n        });\n\n        // Fill layer\n        map.current.addLayer({\n          id: `${city}-zoning-fill`,\n          type: \"fill\",\n          source: `${city}-zoning`,\n          paint: {\n            \"fill-color\": [\n              \"match\",\n              [\"get\", codeField],\n              ...zonings.flatMap(z => [z, colorMap[z]]),\n              \"#cccccc\",\n            ],\n            \"fill-opacity\": 0.6,\n          },\n        });\n\n        // Outline layer\n        map.current.addLayer({\n          id: `${city}-zoning-outline`,\n          type: \"line\",\n          source: `${city}-zoning`,\n          paint: {\n            \"line-color\": \"#000\",\n            \"line-width\": 0.5,\n          },\n        });\n\n        // Popup on click\n        map.current.on(\"click\", `${city}-zoning-fill`, (e) => {\n          const props = e.features[0].properties;\n          const code = props[codeField];\n          const desc = descField ? props[descField] : \"No description listed\";\n\n          new mapboxgl.Popup()\n            .setLngLat(e.lngLat)\n            .setHTML(\n              `<strong>${city.toUpperCase()} Zoning Code:</strong> ${code}<br/><strong>Description:</strong> ${desc}`\n            )\n            .addTo(map.current);\n        });\n\n        // Cursor on hover\n        map.current.on(\"mouseenter\", `${city}-zoning-fill`, () => {\n          map.current.getCanvas().style.cursor = \"pointer\";\n        });\n        map.current.on(\"mouseleave\", `${city}-zoning-fill`, () => {\n          map.current.getCanvas().style.cursor = \"\";\n        });\n      }\n\n      // Toggle feature (Mapbox control style)\n      const toggleContainer = document.createElement(\"div\");\n      toggleContainer.className = \"mapboxgl-ctrl mapboxgl-ctrl-group\";\n      toggleContainer.style.display = \"flex\";\n      toggleContainer.style.flexDirection = \"row\";\n      toggleContainer.style.margin = \"10px\";\n      toggleContainer.style.gap = \"30px\";\n\n      [\"Tempe\", \"Phoenix\", \"Scottsdale\", \"Mesa\", \"Gilbert\", \"Chandler\"].forEach((city) => {\n        const btn = document.createElement(\"button\");\n        btn.textContent = city;\n        btn.style.cursor = \"pointer\";\n\n        btn.onclick = () => {\n          const fillLayer = map.current.getLayer(`${city}-zoning-fill`);\n          const outlineLayer = map.current.getLayer(`${city}-zoning-outline`);\n          if (!fillLayer || !outlineLayer) return;\n\n          const visibility = map.current.getLayoutProperty(`${city}-zoning-fill`, \"visibility\");\n          const newVisibility = visibility === \"none\" ? \"visible\" : \"none\";\n          map.current.setLayoutProperty(`${city}-zoning-fill`, \"visibility\", newVisibility);\n          map.current.setLayoutProperty(`${city}-zoning-outline`, \"visibility\", newVisibility);\n        };\n\n        toggleContainer.appendChild(btn);\n      });\n\n      map.current.addControl(\n        { onAdd: () => toggleContainer, onRemove: () => toggleContainer.remove() },\n        \"top-left\"\n      );\n     // Add zoning layers for all cities\n      await addZoningLayer(\"Tempe\", \"Zoning_District.geojson\", \"ZoningCode\", \"ZoningDescription\");\n      await addZoningLayer(\"Phoenix\", \"Phoenix_Zoning.geojson\", \"ZONING\", \"GEN_ZONE\");\n      await addZoningLayer(\"Scottsdale\", \"Scottsdale_Zoning.geojson\", \"full_zoning\");\n      await addZoningLayer(\"Mesa\", \"mesa_zoning.geojson\", \"Zoning\", \"Description\");\n      await addZoningLayer(\"Gilbert\", \"gilbert_zoning.geojson\", \"ZCODE\", \"Description\");\n      await addZoningLayer(\"Chandler\", \"chandler_zoning.geojson\", \"ZONE_CODE\");\n    });\n\n  }, []);\n  return <div ref={mapContainer} style={{ width: \"100vw\", height: \"100vh\" }} />;\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}