{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/brycethomas/Documents/zonix/app/map/page.jsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";\n\nmapboxgl.accessToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\n\nexport default function MapPage() {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n\n  const defaultCenter = [-111.94, 33.4255]; // Tempe\n  const defaultZoom = 11;\n\n  useEffect(() => {\n    if (map.current || !mapContainer.current) return; // make sure container exists\n\n    // Initialize map\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/streets-v12\",\n      center: defaultCenter,\n      zoom: defaultZoom,\n    });\n\n    map.current.on(\"load\", async () => {\n      // Navigation controls\n      map.current.addControl(new mapboxgl.NavigationControl(), \"top-right\");\n\n      // Geocoder\n      const geocoder = new MapboxGeocoder({\n        accessToken: mapboxgl.accessToken,\n        mapboxgl,\n        marker: false,\n      });\n      map.current.addControl(geocoder, \"top-left\");\n\n      // Random color generator\n      const randomColor = () => `hsl(${Math.random() * 360}, 60%, 60%)`;\n\n      // Function to add zoning layers\n      async function addZoningLayer(city, filename, codeField, descField = null) {\n        const response = await fetch(`/data/${filename}`);\n        const geojson = await response.json();\n\n        // Unique zoning codes\n        const zonings = [\n          ...new Set(\n            geojson.features\n              .map(f => f.properties[codeField])\n              .filter(Boolean)\n          ),\n        ];\n\n        // Assign colors\n        const colorMap = {};\n        zonings.forEach(z => (colorMap[z] = randomColor()));\n\n        // Add source\n        map.current.addSource(`${city}-zoning`, {\n          type: \"geojson\",\n          data: geojson,\n        });\n\n        // Fill layer\n        map.current.addLayer({\n          id: `${city}-zoning-fill`,\n          type: \"fill\",\n          source: `${city}-zoning`,\n          paint: {\n            \"fill-color\": [\n              \"match\",\n              [\"get\", codeField],\n              ...zonings.flatMap(z => [z, colorMap[z]]),\n              \"#cccccc\",\n            ],\n            \"fill-opacity\": 0.6,\n          },\n        });\n\n        // Outline layer\n        map.current.addLayer({\n          id: `${city}-zoning-outline`,\n          type: \"line\",\n          source: `${city}-zoning`,\n          paint: {\n            \"line-color\": \"#000\",\n            \"line-width\": 0.5,\n          },\n        });\n\n        // Popup on click\n        map.current.on(\"click\", `${city}-zoning-fill`, (e) => {\n          const props = e.features[0].properties;\n          const code = props[codeField];\n          const desc = descField ? props[descField] : \"No description listed\";\n\n          new mapboxgl.Popup()\n            .setLngLat(e.lngLat)\n            .setHTML(\n              `<strong>${city.toUpperCase()} Zoning Code:</strong> ${code}<br/><strong>Description:</strong> ${desc}`\n            )\n            .addTo(map.current);\n        });\n\n        // Cursor on hover\n        map.current.on(\"mouseenter\", `${city}-zoning-fill`, () => {\n          map.current.getCanvas().style.cursor = \"pointer\";\n        });\n        map.current.on(\"mouseleave\", `${city}-zoning-fill`, () => {\n          map.current.getCanvas().style.cursor = \"\";\n        });\n      }\n\n      // Toggle feature (Mapbox control style)\n      const toggleContainer = document.createElement(\"div\");\n      toggleContainer.className = \"mapboxgl-ctrl mapboxgl-ctrl-group\";\n      toggleContainer.style.display = \"flex\";\n      toggleContainer.style.flexDirection = \"row\";\n      toggleContainer.style.margin = \"10px\";\n      toggleContainer.style.gap = \"30px\";\n\n      [\"Tempe\", \"Phoenix\", \"Scottsdale\", \"Mesa\", \"Gilbert\", \"Chandler\"].forEach((city) => {\n        const btn = document.createElement(\"button\");\n        btn.textContent = city;\n        btn.style.cursor = \"pointer\";\n\n        btn.onclick = () => {\n          const fillLayer = map.current.getLayer(`${city}-zoning-fill`);\n          const outlineLayer = map.current.getLayer(`${city}-zoning-outline`);\n          if (!fillLayer || !outlineLayer) return;\n\n          const visibility = map.current.getLayoutProperty(`${city}-zoning-fill`, \"visibility\");\n          const newVisibility = visibility === \"none\" ? \"visible\" : \"none\";\n          map.current.setLayoutProperty(`${city}-zoning-fill`, \"visibility\", newVisibility);\n          map.current.setLayoutProperty(`${city}-zoning-outline`, \"visibility\", newVisibility);\n        };\n\n        toggleContainer.appendChild(btn);\n      });\n\n      map.current.addControl(\n        { onAdd: () => toggleContainer, onRemove: () => toggleContainer.remove() },\n        \"top-left\"\n      );\n     // Add zoning layers for all cities\n      await addZoningLayer(\"Tempe\", \"Zoning_District.geojson\", \"ZoningCode\", \"ZoningDescription\");\n      await addZoningLayer(\"Phoenix\", \"Phoenix_Zoning.geojson\", \"ZONING\", \"GEN_ZONE\");\n      await addZoningLayer(\"Scottsdale\", \"Scottsdale_Zoning.geojson\", \"full_zoning\");\n      await addZoningLayer(\"Mesa\", \"mesa_zoning.geojson\", \"Zoning\", \"Description\");\n      await addZoningLayer(\"Gilbert\", \"gilbert_zoning.geojson\", \"ZCODE\", \"Description\");\n      await addZoningLayer(\"Chandler\", \"chandler_zoning.geojson\", \"ZONE_CODE\");\n    });\n\n  }, []);\n  return <div ref={mapContainer} style={{ width: \"100vw\", height: \"100vh\" }} />;\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}